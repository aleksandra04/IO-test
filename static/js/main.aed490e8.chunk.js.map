{"version":3,"sources":["components/Support.js","components/Login.js","components/UserPage.js","components/PasswordReset.js","components/App.js","serviceWorker.js","index.js"],"names":["Support","className","src","alt","Login","useState","email","setEmail","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","emailClass","passwordClass","hintEmailClass","hintPasswordClass","linkTo","length","type","placeholder","onChange","event","target","value","onBlur","test","to","projects","UserPage","map","project","PasswordReset","onSubmit","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aed490e8.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Support.scss';\n\nconst Support = () => {\n\n  return (\n    <section className='support'>\n      <img\n        className='logo'\n        src='https://iotechnologies.com/icons/IO-Technologies.svg'\n        alt='logo'\n      >\n      </img>\n      <p className='support__text'>\n        Get how-to help and instructions or specific featires in\n      </p>\n      <div>\n        <button className='support__button'>help center</button>\n        <span className='support__text support__text--or'>or</span>\n        <button className='support__button'>support</button>\n      </div>\n    </section>\n  )\n}\n\nexport default Support\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Button.scss'\nimport '../styles/Login.scss';\n\nconst Login = () => {\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n\n  const handleEmailChange = (event) => {\n    setEmailError(false)\n    setEmail(event.target.value)\n  }\n\n  const checkErrorEmail = () => {\n    const reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    if (!reg.test(email) && email.length > 0) {\n      setEmailError(true)\n    }\n  }\n\n  const handlePasswordChange = (event) => {\n    setPasswordError(false)\n    setPassword(event.target.value)\n  }\n\n  const checkErrorPassword = () => {\n\n    if (password.length < 8 && password.length > 0) {\n      setPasswordError(true)\n    }\n  }\n\n  const emailClass = emailError\n    ? 'form__input--error form__input'\n    : 'form__input'\n\n  const passwordClass = passwordError\n    ? 'form__input--error form__input'\n    : 'form__input'\n\n  const hintEmailClass = emailError\n    ? 'message message__visible'\n    : 'message'\n\n  const hintPasswordClass = passwordError\n    ? 'message message__visible'\n    : 'message'\n\n  const linkTo = !emailError && !passwordError\n    && email.length && password.length\n    ? '/logged' : '/'\n\n  return (\n    <section className='logIn-container'>\n      <h1 className='logIn-container__header'>\n        Welcome back\n      </h1>\n      <p className='logIn-container__text'>\n        Sign in to continue IO Technologies\n      </p>\n      <form className='form'>\n        <div className='form__container-input'>\n          <input\n            type='email'\n            placeholder='Your email'\n            className={emailClass}\n            onChange={handleEmailChange}\n            value={email}\n            onBlur={checkErrorEmail}\n          >\n          </input>\n          {emailError && email.length > 0 && (\n            <span className={hintEmailClass}>\n              Oops! you entered an invalid email\n            <span className='message__arrow'></span>\n            </span>\n          )}\n        </div>\n\n        <div className='form__container-input'>\n          <input\n            type='password'\n            placeholder='Password'\n            className={passwordClass}\n            onChange={handlePasswordChange}\n            onBlur={checkErrorPassword}\n          >\n          </input>\n          <span className={hintPasswordClass}>\n            Password should have at least 8 characters\n            <span className='message__arrow'></span>\n          </span>\n        </div>\n\n        <Link\n          to={linkTo}\n          className='button button--arrow'\n          type='submit'\n\n        >\n          Log in\n        </Link>\n      </form>\n      <div className='forgot-pwd'>\n        <span className='logIn-container__text'>\n          Forgot your password?\n        </span>\n        <Link\n          to='/reset-pwd'\n          className='forgot-pwd__link'\n        >\n          Reset\n        </Link>\n      </div>\n    </section>\n  )\n}\n\nexport default Login\n","import React from 'react';\nimport '../styles/UserPage.scss';\nimport { Link } from 'react-router-dom';\n\n\nconst projects = [\n  'Flirchi',\n  'io',\n  'company name',\n  'facenews.com',\n  'package',\n  'something else',\n  'random',\n  'comunity',\n  'work'\n]\n\nconst UserPage = () => {\n\n  return (\n    <section className='projects-container'>\n      <h1 className='projects-container__header'>\n        Hi, {' '}\n        <span className='projects-container__header--name'>\n           Nikita !\n        </span>\n      </h1>\n      <p className='projects-container__text'>\n        Please choose your project\n      </p>\n        <ul className='projects-list'>\n          {projects.map(project => (\n            <li className='projects-list__item'>\n              <Link\n                to='someProject'\n                className='projects-list__item__link'\n              >\n                {project}\n              </Link>\n            </li>\n          ))}\n        </ul>\n    </section>\n  )\n}\n\nexport default UserPage","import React from 'react';\nimport '../styles/PasswordReset.scss';\nimport '../styles/Button.scss'\nimport { Link } from 'react-router-dom';\n\nconst PasswordReset = () => {\n  \n  return (\n    <div className='reset'>\n      <div className='link-container'>\n        <Link to='/' className='link-container__link'></Link>\n      </div>\n      <h1 className='reset__header'>\n        Forgot password?\n      </h1>\n      <form\n        className='reset__form'\n        onSubmit='some function'\n      >\n        <input \n          className='reset__form_input'\n          placeholder='Enter your email'\n        >\n        </input>\n        <button className='button'>\n          send me instructions\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default PasswordReset\n","import React from 'react';\nimport '../styles/App.scss';\nimport { Switch, Route } from 'react-router-dom';\nimport Support from './Support';\nimport Login from './Login';\nimport UserPage from './UserPage';\nimport PasswordReset from './PasswordReset';\n\nfunction App() {\n  return (\n    <div className='background-light'>\n      <div className='background-dark'>\n        <div className='left-side'>\n        <Support />\n        </div>\n        <div className='right-side'>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/logged\" component={UserPage} />\n          <Route path='/reset-pwd' component={PasswordReset} />\n        </Switch>\n        </div>\n      </div>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/styles/index.scss';\nimport App from '../src/components/App';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n   document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}